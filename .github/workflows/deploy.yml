# GitHub Actions Workflow Template for EMA Questionnaire Frontend
# This pipeline ONLY builds and deploys the frontend application
# Backend and database are handled separately in other repositories
# Copy this to .github/workflows/deploy.yml when ready to implement CI/CD

name: Build and Deploy Frontend Only

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: askerism/ema-questionnaire-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: askerism
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=${{ env.VITE_API_BASE_URL }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # HashiCorp Vault Integration - Minimal secrets approach
    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_URL }}
        method: jwt
        role: ${{ secrets.VAULT_ROLE }}
        secrets: |
          secret/data/survey-app VITE_API_BASE_URL | VITE_API_BASE_URL ;
          secret/data/survey-app DEPLOY_HOST | SERVER_HOST ;
          secret/data/survey-app DEPLOY_USER | SERVER_USER ;
          secret/data/survey-app DEPLOY_KEY | SSH_PRIVATE_KEY ;
          secret/data/survey-app DEPLOYMENT_PATH | DEPLOYMENT_PATH

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

        
    - name: Deploy Frontend to Server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          # Create deployment directory if it does not exist
          mkdir -p ${{ env.DEPLOYMENT_PATH }} &&
          cd ${{ env.DEPLOYMENT_PATH }} &&
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest &&
          
          # Force stop and remove existing container
          docker stop survey_frontend 2>/dev/null || true &&
          docker rm survey_frontend 2>/dev/null || true &&
          
          # Start new frontend container
          docker run -d \
            --name survey_frontend \
            --network survey-app_survey_network \
            -p 8080:80 \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest &&
          
          # Clean up old images
          docker image prune -f
        '

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ env.SERVER_HOST }}:8080/health || exit 1

# Alternative deployment example using docker-compose with override
  deploy-with-compose:
    needs: build
    runs-on: ubuntu-latest
    if: false  # Disable this job by default, enable when needed
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_URL }}
        method: jwt
        role: ${{ secrets.VAULT_ROLE }}
        secrets: |
          secret/data/survey-app VITE_API_BASE_URL | VITE_API_BASE_URL ;
          secret/data/survey-app DEPLOY_HOST | SERVER_HOST ;
          secret/data/survey-app DEPLOY_USER | SERVER_USER ;
          secret/data/survey-app DEPLOY_KEY | SSH_PRIVATE_KEY ;
          secret/data/survey-app DEPLOYMENT_PATH | DEPLOYMENT_PATH

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Frontend with Docker Run
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          # Pull the latest frontend image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest &&
          
          # Stop and remove existing frontend container
          docker stop survey_frontend || true &&
          docker rm survey_frontend || true &&
          
          # Start new frontend container (assumes backend network exists)
          docker run -d \
            --name survey_frontend \
            --network survey-app_survey_network \
            -p 8080:80 \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest &&
          
          # Clean up old images
          docker image prune -f
        '
